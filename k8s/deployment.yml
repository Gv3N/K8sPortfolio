apiVersion: v1
kind: Namespace
metadata:
  name: k8sportfolio-namespace

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend-deployment
  namespace: k8sportfolio-namespace
spec:
  replicas: 1
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
    spec:
      containers:
      - name: frontend
        image: baktajivan/k8sportfolio:frontend # Change to k8sportfolio_frontend_react_image if using locally built image  # Change to baktajivan/k8sportfolio:frontend if using pre-built image
        ports:
        - containerPort: 80
---
apiVersion: v1
kind: Service
metadata:
  name: frontend-service
  namespace: k8sportfolio-namespace
spec:
  selector:
    app: frontend
  ports:
    - protocol: TCP
      port: 3000
      targetPort: 80
  type: NodePort

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend-deployment
  namespace: k8sportfolio-namespace
spec:
  replicas: 1
  selector:
    matchLabels:
      app: backend
  template:
    metadata:
      labels:
        app: backend
    spec:
      containers:
      - name: backend
        image: baktajivan/k8sportfolio:backend # Change to k8sportfolio_backend_flask_image if locally built image  # Change to baktajivan/k8sportfolio:backend if using pre-built image
        ports:
        - containerPort: 5000
        env:
        - name: POSTGRES_HOST
          value: "db-service"
        - name: POSTGRES_DB
          value: "k8sportfolio"
        - name: POSTGRES_USER
          value: "root"
        - name: POSTGRES_PASSWORD
          value: "password"
---
apiVersion: v1
kind: Service
metadata:
  name: backend-service
  namespace: k8sportfolio-namespace
spec:
  selector:
    app: backend
  ports:
    - protocol: TCP
      port: 5000
      targetPort: 5000
  type: NodePort

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deployment
  namespace: k8sportfolio-namespace
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: baktajivan/k8sportfolio:nginx # Change to k8sportfolio_server_nginx_image if locally built image  # Change to baktajivan/k8sportfolio:nginx if using pre-built image
        ports:
        - containerPort: 80
        volumeMounts:
        - mountPath: /etc/nginx/conf.d
          name: nginx-config
      volumes:
      - name: nginx-config
        configMap:
          name: nginx-config

---
apiVersion: v1
kind: Service
metadata:
  name: nginx-service
  namespace: k8sportfolio-namespace
spec:
  selector:
    app: nginx
  ports:
    - protocol: TCP
      port: 8080
      targetPort: 80
  type: NodePort

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: db-deployment
  namespace: k8sportfolio-namespace
spec:
  replicas: 1
  selector:
    matchLabels:
      app: db
  template:
    metadata:
      labels:
        app: db
    spec:
      containers:
      - name: postgres
        image: postgres:13
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_DB
          value: "k8sportfolio"
        - name: POSTGRES_USER
          value: "root"
        - name: POSTGRES_PASSWORD
          value: "password"
        volumeMounts:
        - mountPath: /var/lib/postgresql/data
          name: postgres-storage
      volumes:
      - name: postgres-storage
        persistentVolumeClaim:
          claimName: postgres-pvc

---
apiVersion: v1
kind: Service
metadata:
  name: db-service
  namespace: k8sportfolio-namespace
spec:
  selector:
    app: db
  ports:
    - protocol: TCP
      port: 5432
      targetPort: 5432
  clusterIP: None

---

apiVersion: v1
kind: PersistentVolume
metadata:
  name: postgres-pv
  namespace: k8sportfolio-namespace
spec:
  capacity:
    storage: 1Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: /mnt/data/postgres

---

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
  namespace: k8sportfolio-namespace
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
